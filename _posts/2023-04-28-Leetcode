def Mergesort(S):
    if(len(S)>1):
        mid = len(S)//2
        L = S[:mid]
        R = S[mid:]
        Mergesort(L)
        Mergesort(R)
        i, j = 0, 0
        k=0
        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                S[k] = L[i]
                i = i + 1
                k = k + 1
            else:
                S[k] = R[j]
                j = j + 1
                k = k + 1
        while k < len(S):
            if i < len(L):
                S[k] = L[i]
                i = i + 1
                k = k + 1
            elif j < len(R):
                S[k] = R[j]
                j = j + 1
                k = k + 1
    
class Solution:
    def missingNumber(self, nums: List[int]) -> int:
        miss = -1
        b=[]
        Mergesort(nums)
        for i in range(len(nums)):
            b.append(nums[i])
        l = 0
        if b[0] != 0:
            miss = 0
        while l < len(b) and miss != 0:
            if l != b[l]:
                miss=l
                break
            l =l+1
        if miss == -1:
            miss = len(b)
        return miss
